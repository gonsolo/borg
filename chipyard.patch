From a89e303a20c7a0264df98b1fccee80f766d50002 Mon Sep 17 00:00:00 2001
From: Gon Solo <gonsolo@gmail.com>
Date: Mon, 11 Nov 2024 17:53:50 +0100
Subject: [PATCH] Borg for 1.13.0.

---
 build.sbt                                     |   8 +-
 generators/borg/src/main/scala/Borg.scala     | 211 ++++++++++++++++++
 .../chipyard/src/main/scala/DigitalTop.scala  |   1 +
 .../main/cc/bridges/tracerv/tracerv_dwarf.cc  |  86 +++----
 .../main/cc/bridges/tracerv/tracerv_dwarf.h   |   4 +-
 .../main/cc/bridges/tracerv/tracerv_elf.cc    |   4 +-
 .../chip/src/main/scala/TargetConfigs.scala   |   4 +
 7 files changed, 270 insertions(+), 48 deletions(-)
 create mode 100644 generators/borg/src/main/scala/Borg.scala

diff --git a/build.sbt b/build.sbt
index f50564e6..5851600c 100644
--- a/build.sbt
+++ b/build.sbt
@@ -158,7 +158,7 @@ lazy val chipyard = (project in file("generators/chipyard"))
     dsptools, rocket_dsp_utils,
     gemmini, icenet, tracegen, cva6, nvdla, sodor, ibex, fft_generator,
     constellation, mempress, barf, shuttle, caliptra_aes, rerocc,
-    compressacc, saturn, ara, firrtl2_bridge, vexiiriscv)
+    compressacc, saturn, ara, firrtl2_bridge, vexiiriscv, borg)
   .settings(libraryDependencies ++= rocketLibDeps.value)
   .settings(
     libraryDependencies ++= Seq(
@@ -322,6 +322,12 @@ lazy val chipyard_fpga = (project in file("./fpga"))
   .dependsOn(chipyard, fpga_shells)
   .settings(commonSettings)
 
+
+lazy val borg = (project in file("generators/borg"))
+  .dependsOn(rocketchip)
+  .settings(libraryDependencies ++= rocketLibDeps.value)
+  .settings(commonSettings)
+
 // Components of FireSim
 
 lazy val firrtl2 = freshProject("firrtl2", file("./tools/firrtl2"))
diff --git a/generators/borg/src/main/scala/Borg.scala b/generators/borg/src/main/scala/Borg.scala
new file mode 100644
index 00000000..acd0b26b
--- /dev/null
+++ b/generators/borg/src/main/scala/Borg.scala
@@ -0,0 +1,211 @@
+package borg
+
+import chisel3._
+import chisel3.util._
+import chisel3.experimental.{IntParam, BaseModule}
+import freechips.rocketchip.prci._
+import freechips.rocketchip.subsystem.{BaseSubsystem, CacheBlockBytes, FBUS, PBUS}
+import freechips.rocketchip.diplomacy.{AddressSet, IdRange}
+import freechips.rocketchip.resources.SimpleDevice
+import freechips.rocketchip.regmapper.{HasRegMap, RegField}
+import freechips.rocketchip.tilelink._
+import freechips.rocketchip.util.UIntIsOneOf
+import org.chipsalliance.cde.config.{Parameters, Field, Config}
+import org.chipsalliance.diplomacy.lazymodule.{InModuleBody, LazyModule}
+
+case class BorgParams(
+  address: BigInt = 0x4000,
+  width: Int = 32,
+  dmaBase: BigInt = 0x88000000L,
+  dmaSize: BigInt = 0x1000)
+
+case object BorgKey extends Field[Option[BorgParams]](None)
+
+class BorgIO(val w: Int) extends Bundle {
+  val clock = Input(Clock())
+  val reset = Input(Bool())
+  val input_ready = Output(Bool())
+  val input_valid = Input(Bool())
+  val x = Input(UInt(w.W))
+  val y = Input(UInt(w.W))
+  val output_ready = Input(Bool())
+  val output_valid = Output(Bool())
+  val borg = Output(UInt(w.W))
+  val busy = Output(Bool())
+}
+
+class BorgTopIO extends Bundle {
+  //val borg_busy = Output(Bool())
+}
+
+trait HasBorgTopIO {
+  def io: BorgTopIO
+}
+
+class BorgMMIOChiselModule(val w: Int) extends Module {
+  val io = IO(new BorgIO(w))
+  val s_idle :: s_run :: s_done :: Nil = Enum(3)
+
+  val state = RegInit(s_idle)
+  val tmp   = Reg(UInt(w.W))
+  val borg   = Reg(UInt(w.W))
+
+  io.input_ready := state === s_idle
+  io.output_valid := state === s_done
+  io.borg := borg
+
+  when (state === s_idle && io.input_valid) {
+    state := s_run
+  } .elsewhen (state === s_run && tmp === 0.U) {
+    state := s_done
+  } .elsewhen (state === s_done && io.output_ready) {
+    state := s_idle
+  }
+
+  when (state === s_idle && io.input_valid) {
+    borg := io.x
+    tmp := io.y
+  } .elsewhen (state === s_run) {
+    when (borg > tmp) {
+      borg := borg - tmp
+    } .otherwise {
+      tmp := tmp - borg
+    }
+  }
+
+  io.busy := state =/= s_idle
+}
+
+class BorgTL(params: BorgParams, beatBytes: Int)(implicit p: Parameters) extends ClockSinkDomain(ClockSinkParameters())(p) {
+
+  val device = new SimpleDevice("borg-device", Seq("borg,borg-1"))
+  val registerNode = TLRegisterNode(Seq(AddressSet(params.address, 4096-1)), device, "reg/control", beatBytes=beatBytes)
+  val clientNode = TLClientNode(Seq(TLMasterPortParameters.v1(Seq(TLMasterParameters.v1(name = "dma-test", sourceId = IdRange(0, 1))))))
+
+  override lazy val module = new BorgImpl
+
+  class BorgImpl extends Impl with HasBorgTopIO {
+
+    val io = IO(new BorgTopIO)
+
+    // DMA
+    val (mem, edge) = clientNode.out(0)
+    val addressBits = edge.bundle.addressBits
+    val blockBytes = p(CacheBlockBytes)
+    require(params.dmaSize % blockBytes == 0, "DMA size does not match!")
+    val s_dma_init :: s_dma_write :: s_dma_resp :: s_dma_done :: Nil = Enum(4)
+
+    withClockAndReset(clock, reset) {
+      val dma_state = RegInit(s_dma_init)
+      val address = Reg(UInt(addressBits.W))
+      val bytesLeft = Reg(UInt(log2Ceil(params.dmaSize+1).W))
+      val testValue = 666.U
+      val lgBlockBytes = log2Ceil(blockBytes).U
+
+      mem.a.valid := dma_state === s_dma_write
+      val (_, putBits) = edge.Put(
+        fromSource = 0.U,
+        toAddress = address,
+        lgSize = lgBlockBytes,
+        data = testValue)
+      mem.d.ready := dma_state === s_dma_resp
+
+      //val (_, getBits) = edge.Get(
+      //  fromSource = 0.U,
+      //  toAddress = address,
+      //  lgSize = lgBlockBytes)
+
+      //val putting = true.B
+      //when (putting) {
+      //  mem.a.bits := putBits
+      //}.otherwise {
+      //  mem.a.bits := getBits
+      //}
+      mem.a.bits := putBits
+
+      when (dma_state === s_dma_init) {
+        address := params.dmaBase.U
+        bytesLeft := params.dmaSize.U
+        dma_state := s_dma_write
+      }
+
+      when (edge.done(mem.a)) {
+        address := address + blockBytes.U
+        bytesLeft := bytesLeft - blockBytes.U
+        dma_state := s_dma_resp
+      }
+
+      when (mem.d.fire) {
+        dma_state := Mux(bytesLeft === 0.U, s_dma_done, s_dma_write)
+      }
+      // DMA
+
+      //val x = Reg(UInt(params.width.W))
+      //val y = Wire(new DecoupledIO(UInt(params.width.W)))
+      //val borg = Wire(new DecoupledIO(UInt(params.width.W)))
+      //val status = Wire(UInt(2.W))
+
+      //val impl_io = {
+      //  val impl = Module(new BorgMMIOChiselModule(params.width))
+      //  impl.io
+      //}
+
+      //impl_io.clock := clock
+      //impl_io.reset := reset.asBool
+
+      //impl_io.x := x
+      //impl_io.y := y.bits
+      //impl_io.input_valid := y.valid
+      //y.ready := impl_io.input_ready
+
+      //borg.bits := impl_io.borg
+      //borg.valid := impl_io.output_valid
+      //impl_io.output_ready := borg.ready
+
+      //status := Cat(impl_io.input_ready, impl_io.output_valid)
+      //io.borg_busy := impl_io.busy
+
+      registerNode.regmap(
+        //0x00 -> Seq(
+        //  RegField.r(2, status)),               // a read-only status register
+        //0x04 -> Seq(
+        //  RegField.w(params.width, x)),         // a plain, write-only register
+        //0x08 -> Seq(
+        //  RegField.w(params.width, y)),         // write-only, y.valid is set on write
+        //0x0C -> Seq(
+        //  RegField.r(params.width, borg)),       // read-only, borg.ready is set on read
+        0x10 -> Seq(
+          RegField.r(2, dma_state))             // read-only
+        )
+    }
+  }
+}
+
+trait CanHavePeripheryBorg { this: BaseSubsystem =>
+  private val portName = "borgPort"
+  private val pbus = locateTLBusWrapper(PBUS)
+  private val fbus = locateTLBusWrapper(FBUS)
+
+  val borg_busy = p(BorgKey) match {
+    case Some(params) => {
+      val borg = {
+        val borg = LazyModule(new BorgTL(params, pbus.beatBytes)(p))
+        borg.clockNode := pbus.fixedClockNode
+        pbus.coupleTo(portName) { borg.registerNode := TLFragmenter(pbus.beatBytes, pbus.blockBytes) := _ }
+        fbus.coupleFrom("dma-test") { _ := borg.clientNode }
+        borg
+      }
+      val borg_busy = InModuleBody {
+        //val busy = IO(Output(Bool())).suggestName("borg_busy")
+        //busy := borg.module.io.borg_busy
+        //busy
+      }
+      Some(borg_busy)
+    }
+    case None => None
+  }
+}
+
+class WithBorg() extends Config((site, here, up) => {
+  case BorgKey => Some(BorgParams())
+})
diff --git a/generators/chipyard/src/main/scala/DigitalTop.scala b/generators/chipyard/src/main/scala/DigitalTop.scala
index c4fa17aa..a3697e7f 100644
--- a/generators/chipyard/src/main/scala/DigitalTop.scala
+++ b/generators/chipyard/src/main/scala/DigitalTop.scala
@@ -40,6 +40,7 @@ class DigitalTop(implicit p: Parameters) extends ChipyardSystem
   with fftgenerator.CanHavePeripheryFFT // Enables optionally having an MMIO-based FFT block
   with constellation.soc.CanHaveGlobalNoC // Support instantiating a global NoC interconnect
   with rerocc.CanHaveReRoCCTiles // Support tiles that instantiate rerocc-attached accelerators
+  with borg.CanHavePeripheryBorg // Enables optionally adding gonsolo's Borg
 {
   override lazy val module = new DigitalTopModule(this)
 }
diff --git a/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_dwarf.cc b/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_dwarf.cc
index 8665643f..b829f13c 100644
--- a/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_dwarf.cc
+++ b/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_dwarf.cc
@@ -41,46 +41,46 @@ private:
   Dwarf_Debug dbg;
 };
 
-dwarf_t::dwarf_t(Elf *elf) {
-  Dwarf_Error err;
-  if (dwarf_elf_init(
-          elf, DW_DLC_READ, &dwarf_runtime_error, nullptr, &this->dbg, &err) !=
-      DW_DLV_OK) {
-    this->dbg = nullptr;
-  }
-}
+//dwarf_t::dwarf_t(Elf *elf) {
+//  Dwarf_Error err;
+//  if (dwarf_elf_init(
+//          elf, DW_DLC_READ, &dwarf_runtime_error, nullptr, &this->dbg, &err) !=
+//      DW_DLV_OK) {
+//    this->dbg = nullptr;
+//  }
+//}
 
 void dwarf_t::subroutines(subroutine_map &table) {
   if (this->dbg == nullptr) {
     return;
   }
   Dwarf_Unsigned next_cu_offset;
-  while (dwarf_next_cu_header_c(this->dbg,
-                                1,       // is_info
-                                nullptr, // cu_header_length
-                                nullptr, // version_stamp
-                                nullptr, // abbrev_offset
-                                nullptr, // address_size
-                                nullptr, // offset_size
-                                nullptr, // extension_size
-                                nullptr, // signature
-                                nullptr, // typeoffset
-                                &next_cu_offset,
-                                nullptr) == DW_DLV_OK) {
-
-    // Expect CU to have an initial DIE
-    Dwarf_Die die;
-    if (dwarf_siblingof(this->dbg, nullptr, &die, nullptr) != DW_DLV_OK) {
-      continue;
-    }
-    die_ptr die_wrap(die, dwarf_deleter(dbg));
-
-    if (dwarf_child(die, &die, nullptr) == DW_DLV_OK) {
-      die_wrap = die_ptr(die, dwarf_deleter(dbg));
-      // Enumerate subprograms
-      this->siblings(std::move(die_wrap), &dwarf_t::die_subprogram, table);
-    }
-  }
+//  while (dwarf_next_cu_header_c(this->dbg,
+//                                1,       // is_info
+//                                nullptr, // cu_header_length
+//                                nullptr, // version_stamp
+//                                nullptr, // abbrev_offset
+//                                nullptr, // address_size
+//                                nullptr, // offset_size
+//                                nullptr, // extension_size
+//                                nullptr, // signature
+//                                nullptr, // typeoffset
+//                                &next_cu_offset,
+//                                nullptr) == DW_DLV_OK) {
+//
+//    // Expect CU to have an initial DIE
+//    Dwarf_Die die;
+//    if (dwarf_siblingof(this->dbg, nullptr, &die, nullptr) != DW_DLV_OK) {
+//      continue;
+//    }
+//    die_ptr die_wrap(die, dwarf_deleter(dbg));
+//
+//    if (dwarf_child(die, &die, nullptr) == DW_DLV_OK) {
+//      die_wrap = die_ptr(die, dwarf_deleter(dbg));
+//      // Enumerate subprograms
+//      this->siblings(std::move(die_wrap), &dwarf_t::die_subprogram, table);
+//    }
+//  }
 }
 
 // Traverse siblings of a given DIE
@@ -88,15 +88,15 @@ template <typename T>
 void dwarf_t::siblings(die_ptr die,
                        void (dwarf_t::*fn)(Dwarf_Die, T &),
                        T &arg) {
-  for (;;) {
-    Dwarf_Die p = die.get();
-
-    (this->*fn)(p, arg);
-    if (dwarf_siblingof(this->dbg, p, &p, nullptr) != DW_DLV_OK) {
-      return;
-    }
-    die = die_ptr(p, dwarf_deleter(dbg));
-  }
+//  for (;;) {
+//    Dwarf_Die p = die.get();
+//
+//    (this->*fn)(p, arg);
+//    if (dwarf_siblingof(this->dbg, p, &p, nullptr) != DW_DLV_OK) {
+//      return;
+//    }
+//    die = die_ptr(p, dwarf_deleter(dbg));
+//  }
 }
 
 void dwarf_t::die_callsite(Dwarf_Die die, std::vector<callsite_t> &table) {
diff --git a/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_dwarf.h b/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_dwarf.h
index 34ea4d87..b407d68c 100644
--- a/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_dwarf.h
+++ b/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_dwarf.h
@@ -34,10 +34,10 @@ const subroutine_t *subroutine_find(const subroutine_map &, uint64_t);
 
 class dwarf_t {
 public:
-  dwarf_t(Elf *);
+  //dwarf_t(Elf *);
   virtual ~dwarf_t(void) {
     if (this->dbg) {
-      dwarf_finish(this->dbg, nullptr);
+      //dwarf_finish(this->dbg, nullptr);
     }
   }
 
diff --git a/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_elf.cc b/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_elf.cc
index 1f03202e..8d48894b 100644
--- a/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_elf.cc
+++ b/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_elf.cc
@@ -75,8 +75,8 @@ void *elf_t::section_data(const char *name, size_t *size) {
 
 std::pair<uint64_t, uint64_t> elf_t::subroutines(subroutine_map &table) {
   {
-    dwarf_t dwarf(this->elf);
-    dwarf.subroutines(table);
+    //dwarf_t dwarf(this->elf);
+    //dwarf.subroutines(table);
   }
 
   size_t shnum;
diff --git a/generators/firechip/chip/src/main/scala/TargetConfigs.scala b/generators/firechip/chip/src/main/scala/TargetConfigs.scala
index f677b5ea..f0065013 100644
--- a/generators/firechip/chip/src/main/scala/TargetConfigs.scala
+++ b/generators/firechip/chip/src/main/scala/TargetConfigs.scala
@@ -361,3 +361,7 @@ class FireSimLargeBoomSV39CospikeConfig extends Config(
   new WithFireSimConfigTweaks++
   new freechips.rocketchip.rocket.WithSV39 ++
   new chipyard.LargeBoomV3Config)
+
+class BorgConfig extends Config(
+  new borg.WithBorg ++
+  new FireSimRocket1GiBDRAMConfig)
-- 
2.47.0

