diff --git a/build.sbt b/build.sbt
index f50564e6..5851600c 100644
--- a/build.sbt
+++ b/build.sbt
@@ -158,7 +158,7 @@ lazy val chipyard = (project in file("generators/chipyard"))
     dsptools, rocket_dsp_utils,
     gemmini, icenet, tracegen, cva6, nvdla, sodor, ibex, fft_generator,
     constellation, mempress, barf, shuttle, caliptra_aes, rerocc,
-    compressacc, saturn, ara, firrtl2_bridge, vexiiriscv)
+    compressacc, saturn, ara, firrtl2_bridge, vexiiriscv, borg)
   .settings(libraryDependencies ++= rocketLibDeps.value)
   .settings(
     libraryDependencies ++= Seq(
@@ -322,6 +322,12 @@ lazy val chipyard_fpga = (project in file("./fpga"))
   .dependsOn(chipyard, fpga_shells)
   .settings(commonSettings)
 
+
+lazy val borg = (project in file("generators/borg"))
+  .dependsOn(rocketchip)
+  .settings(libraryDependencies ++= rocketLibDeps.value)
+  .settings(commonSettings)
+
 // Components of FireSim
 
 lazy val firrtl2 = freshProject("firrtl2", file("./tools/firrtl2"))
diff --git a/generators/chipyard/src/main/scala/DigitalTop.scala b/generators/chipyard/src/main/scala/DigitalTop.scala
index c4fa17aa..a3697e7f 100644
--- a/generators/chipyard/src/main/scala/DigitalTop.scala
+++ b/generators/chipyard/src/main/scala/DigitalTop.scala
@@ -40,6 +40,7 @@ class DigitalTop(implicit p: Parameters) extends ChipyardSystem
   with fftgenerator.CanHavePeripheryFFT // Enables optionally having an MMIO-based FFT block
   with constellation.soc.CanHaveGlobalNoC // Support instantiating a global NoC interconnect
   with rerocc.CanHaveReRoCCTiles // Support tiles that instantiate rerocc-attached accelerators
+  with borg.CanHavePeripheryBorg // Enables optionally adding gonsolo's Borg
 {
   override lazy val module = new DigitalTopModule(this)
 }
diff --git a/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_dwarf.cc b/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_dwarf.cc
index 8665643f..b829f13c 100644
--- a/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_dwarf.cc
+++ b/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_dwarf.cc
@@ -41,46 +41,46 @@ private:
   Dwarf_Debug dbg;
 };
 
-dwarf_t::dwarf_t(Elf *elf) {
-  Dwarf_Error err;
-  if (dwarf_elf_init(
-          elf, DW_DLC_READ, &dwarf_runtime_error, nullptr, &this->dbg, &err) !=
-      DW_DLV_OK) {
-    this->dbg = nullptr;
-  }
-}
+//dwarf_t::dwarf_t(Elf *elf) {
+//  Dwarf_Error err;
+//  if (dwarf_elf_init(
+//          elf, DW_DLC_READ, &dwarf_runtime_error, nullptr, &this->dbg, &err) !=
+//      DW_DLV_OK) {
+//    this->dbg = nullptr;
+//  }
+//}
 
 void dwarf_t::subroutines(subroutine_map &table) {
   if (this->dbg == nullptr) {
     return;
   }
   Dwarf_Unsigned next_cu_offset;
-  while (dwarf_next_cu_header_c(this->dbg,
-                                1,       // is_info
-                                nullptr, // cu_header_length
-                                nullptr, // version_stamp
-                                nullptr, // abbrev_offset
-                                nullptr, // address_size
-                                nullptr, // offset_size
-                                nullptr, // extension_size
-                                nullptr, // signature
-                                nullptr, // typeoffset
-                                &next_cu_offset,
-                                nullptr) == DW_DLV_OK) {
-
-    // Expect CU to have an initial DIE
-    Dwarf_Die die;
-    if (dwarf_siblingof(this->dbg, nullptr, &die, nullptr) != DW_DLV_OK) {
-      continue;
-    }
-    die_ptr die_wrap(die, dwarf_deleter(dbg));
-
-    if (dwarf_child(die, &die, nullptr) == DW_DLV_OK) {
-      die_wrap = die_ptr(die, dwarf_deleter(dbg));
-      // Enumerate subprograms
-      this->siblings(std::move(die_wrap), &dwarf_t::die_subprogram, table);
-    }
-  }
+//  while (dwarf_next_cu_header_c(this->dbg,
+//                                1,       // is_info
+//                                nullptr, // cu_header_length
+//                                nullptr, // version_stamp
+//                                nullptr, // abbrev_offset
+//                                nullptr, // address_size
+//                                nullptr, // offset_size
+//                                nullptr, // extension_size
+//                                nullptr, // signature
+//                                nullptr, // typeoffset
+//                                &next_cu_offset,
+//                                nullptr) == DW_DLV_OK) {
+//
+//    // Expect CU to have an initial DIE
+//    Dwarf_Die die;
+//    if (dwarf_siblingof(this->dbg, nullptr, &die, nullptr) != DW_DLV_OK) {
+//      continue;
+//    }
+//    die_ptr die_wrap(die, dwarf_deleter(dbg));
+//
+//    if (dwarf_child(die, &die, nullptr) == DW_DLV_OK) {
+//      die_wrap = die_ptr(die, dwarf_deleter(dbg));
+//      // Enumerate subprograms
+//      this->siblings(std::move(die_wrap), &dwarf_t::die_subprogram, table);
+//    }
+//  }
 }
 
 // Traverse siblings of a given DIE
@@ -88,15 +88,15 @@ template <typename T>
 void dwarf_t::siblings(die_ptr die,
                        void (dwarf_t::*fn)(Dwarf_Die, T &),
                        T &arg) {
-  for (;;) {
-    Dwarf_Die p = die.get();
-
-    (this->*fn)(p, arg);
-    if (dwarf_siblingof(this->dbg, p, &p, nullptr) != DW_DLV_OK) {
-      return;
-    }
-    die = die_ptr(p, dwarf_deleter(dbg));
-  }
+//  for (;;) {
+//    Dwarf_Die p = die.get();
+//
+//    (this->*fn)(p, arg);
+//    if (dwarf_siblingof(this->dbg, p, &p, nullptr) != DW_DLV_OK) {
+//      return;
+//    }
+//    die = die_ptr(p, dwarf_deleter(dbg));
+//  }
 }
 
 void dwarf_t::die_callsite(Dwarf_Die die, std::vector<callsite_t> &table) {
diff --git a/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_dwarf.h b/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_dwarf.h
index 34ea4d87..b407d68c 100644
--- a/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_dwarf.h
+++ b/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_dwarf.h
@@ -34,10 +34,10 @@ const subroutine_t *subroutine_find(const subroutine_map &, uint64_t);
 
 class dwarf_t {
 public:
-  dwarf_t(Elf *);
+  //dwarf_t(Elf *);
   virtual ~dwarf_t(void) {
     if (this->dbg) {
-      dwarf_finish(this->dbg, nullptr);
+      //dwarf_finish(this->dbg, nullptr);
     }
   }
 
diff --git a/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_elf.cc b/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_elf.cc
index 1f03202e..8d48894b 100644
--- a/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_elf.cc
+++ b/generators/firechip/bridgestubs/src/main/cc/bridges/tracerv/tracerv_elf.cc
@@ -75,8 +75,8 @@ void *elf_t::section_data(const char *name, size_t *size) {
 
 std::pair<uint64_t, uint64_t> elf_t::subroutines(subroutine_map &table) {
   {
-    dwarf_t dwarf(this->elf);
-    dwarf.subroutines(table);
+    //dwarf_t dwarf(this->elf);
+    //dwarf.subroutines(table);
   }
 
   size_t shnum;
diff --git a/generators/firechip/chip/src/main/scala/TargetConfigs.scala b/generators/firechip/chip/src/main/scala/TargetConfigs.scala
index f677b5ea..bb1a6553 100644
--- a/generators/firechip/chip/src/main/scala/TargetConfigs.scala
+++ b/generators/firechip/chip/src/main/scala/TargetConfigs.scala
@@ -361,3 +361,16 @@ class FireSimLargeBoomSV39CospikeConfig extends Config(
   new WithFireSimConfigTweaks++
   new freechips.rocketchip.rocket.WithSV39 ++
   new chipyard.LargeBoomV3Config)
+
+class BorgConfig extends Config(
+  new FireSimRocket1GiBDRAMConfig)
+
+  //new FireSimRocketConfig) // Fails: Too much DRAM: 16GB
+
+  //new borg.WithBorg ++
+  //new freechips.rocketchip.subsystem.WithExtMemSize((1 << 28) * 1L) ++
+  //new WithDefaultFireSimBridges ++
+  //new WithFireSimConfigTweaks ++
+  //new freechips.rocketchip.rocket.WithNSmallCores(1) ++
+  //new chipyard.config.AbstractConfig)
+
